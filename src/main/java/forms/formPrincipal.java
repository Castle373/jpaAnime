/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import Entitys.Anime;
import Entitys.Personaje;
import Negocio.IAnimeNegocio;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author diego
 */
public class formPrincipal extends javax.swing.JFrame {

    private IAnimeNegocio AnimeNegocio;
    private int paginas;
    private List<Anime> ListaActual;

    /**
     * Creates new form formPrincipal
     */
    public formPrincipal(IAnimeNegocio AnimeNegocio) {
        this.AnimeNegocio = AnimeNegocio;
        initComponents();
        lblSinRegistros.setVisible(false);
        if (this.AnimeNegocio.obtenerLista()!=null) {
            actualizarPaginas(this.AnimeNegocio.obtenerLista().size());
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAnime = new javax.swing.JTable();
        btnCrearTablas = new javax.swing.JButton();
        CantidadPaginaCombo = new javax.swing.JComboBox<>();
        PaginasCbx = new javax.swing.JComboBox<>();
        txtFiltro = new javax.swing.JTextField();
        lblSinRegistros = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblAnime.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblAnime);

        btnCrearTablas.setText("Crear Tablas y Registros");
        btnCrearTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearTablasActionPerformed(evt);
            }
        });

        CantidadPaginaCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "5" }));
        CantidadPaginaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CantidadPaginaComboActionPerformed(evt);
            }
        });

        PaginasCbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PaginasCbxActionPerformed(evt);
            }
        });

        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroKeyReleased(evt);
            }
        });

        lblSinRegistros.setText("SIN REGISTROS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 594, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(277, 277, 277)
                .addComponent(btnCrearTablas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(CantidadPaginaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 857, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblSinRegistros))
                    .addComponent(PaginasCbx, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCrearTablas)
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CantidadPaginaCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PaginasCbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSinRegistros)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
public void llenarTabla(List<Anime> lista) {
        DefaultTableModel defa = new DefaultTableModel();
        tblAnime.setModel(defa);
        defa.addColumn("Anime");
        defa.addColumn("Generos");
        defa.addColumn("Capitulos");
        defa.addColumn("Personajes");
        if (lista==null) {
        return;
        }
        Object[] datos = new Object[defa.getColumnCount()];
            for (Anime anime:lista) {
               datos[0]=anime.getNombre();
               datos[1]=anime.getGenero();
               datos[2]=anime.getCantidadCapitulos();
               String Personaje="";
                for (int i = 0; i < anime.getPersonaje().size(); i++){
                    if (i!=0) {
                        Personaje= Personaje.concat(", ");
                    } 
                    Personaje=Personaje.concat(anime.getPersonaje().get(i).getNombre());
                    
                }
               datos[3]=Personaje;
               defa.addRow(datos);
                }
}
    private void btnCrearTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearTablasActionPerformed
        if (AnimeNegocio.obtenerLista() != null) {
            JOptionPane.showMessageDialog(this, "Ya se Crearon los Registros", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //creas animes
        Anime onePiece = new Anime("One Piece","Comedia,Accion,Fantasia,Aventura" ,"1046");
        Anime hunter = new Anime("Hunter X Hunter","Accion,Fantasia,Aventura", "148");
        Anime fairyTail = new Anime("Fairy Tail","Magia,Accion,Fantasia,Aventura", "545");

        //crea personajes
        Personaje luffy = new Personaje("Monkey D. Luffy", "Futuro Rey de los piratas y actual capitan de los Sombreros de paja", onePiece);
        Personaje Zoro = new Personaje("Roronoa Zoro", "Espadachin de la Tripulacion de los Sombreros de paja", onePiece);
        Personaje Sanji = new Personaje("Vinsmoke Sanji", "Chef de los Sombreros de paja", onePiece);

        Personaje gon = new Personaje("Gon Freecss ", "Cazador e hijo del famoso cazador Ging Freecss.", hunter);
        Personaje killua = new Personaje("Killua Zoldyck", "Asesino Zoldyck (Antes), ahora es Cazador", hunter);
        Personaje hisoka = new Personaje("Hisoka Morow", "Cazador,Miembro de la Brigada Fantasma #4 (Antes),Amo del Piso", hunter);
        Personaje Lucy = new Personaje("Lucy Heartfilia", "Miembro del gremio FairyTail y compañera de Natsu", fairyTail);
        Personaje natsu = new Personaje("Natsu Dragneel", "Usuario de magia de dragon y miembro del gremio Fairy Tail", fairyTail);
        Personaje happy = new Personaje("Happy ", "Compañero de Natsu desde nacimiento", fairyTail);

        //Crea lista de los personajes
        List<Personaje> listaPersonajeOnePiece = new ArrayList<Personaje>();
        List<Personaje> listaPersonajeHunter = new ArrayList<Personaje>();
        List<Personaje> listaPersonajeFairyTail = new ArrayList<Personaje>();
        listaPersonajeOnePiece.add(luffy);
        listaPersonajeOnePiece.add(Zoro);
        listaPersonajeOnePiece.add(Sanji);
        listaPersonajeHunter.add(killua);
        listaPersonajeHunter.add(hisoka);
        listaPersonajeHunter.add(gon);
        listaPersonajeFairyTail.add(Lucy);
        listaPersonajeFairyTail.add(happy);
        listaPersonajeFairyTail.add(natsu);

        //Guardas las listas de los personajes en su respectivo anime
        onePiece.setPersonaje(listaPersonajeOnePiece);
        hunter.setPersonaje(listaPersonajeHunter);
        fairyTail.setPersonaje(listaPersonajeFairyTail);

        //Crea lista de los animes
        List<Anime> listaAnimes = new ArrayList<Anime>();
        listaAnimes.add(onePiece);
        listaAnimes.add(hunter);
        listaAnimes.add(fairyTail);

        //Mandas a guardar la lista de animes
        if (AnimeNegocio.agregaAnimeLista(listaAnimes) == null) {
            JOptionPane.showMessageDialog(this, "Nose pudo Aguadar el Anime", "Error", JOptionPane.ERROR_MESSAGE);
        }
        filtro();
    }//GEN-LAST:event_btnCrearTablasActionPerformed

    private void CantidadPaginaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CantidadPaginaComboActionPerformed
        String filtro = txtFiltro.getText();
        if (AnimeNegocio.obtenerListaFiltro(filtro)==null) {
            return;
        }
        actualizarPaginas(AnimeNegocio.obtenerListaFiltro(filtro).size());
    }//GEN-LAST:event_CantidadPaginaComboActionPerformed

    private void PaginasCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PaginasCbxActionPerformed
        if (PaginasCbx.getSelectedItem() != null) {
            int limite = Integer.parseInt((String) CantidadPaginaCombo.getSelectedItem());
            int pagina = Integer.parseInt((String) PaginasCbx.getSelectedItem());
            int offset = (limite * (pagina - 1));
            String filtro = txtFiltro.getText();
            ListaActual = AnimeNegocio.obtenerListaFiltro(filtro, limite, offset);
            llenarTabla(ListaActual);   
        }


    }//GEN-LAST:event_PaginasCbxActionPerformed
    public void  filtro(){
        String filtro = txtFiltro.getText();
        if (!filtro.equalsIgnoreCase("")) {
            if (AnimeNegocio.obtenerListaFiltro(filtro)==null) {
                PaginasCbx.removeAllItems();
                lblSinRegistros.setVisible(true);
                DefaultTableModel defa = new DefaultTableModel();
                
                defa=(DefaultTableModel) tblAnime.getModel();
                for (int i = 0; i < defa.getRowCount(); i++) {
                    defa.removeRow(i);
                }
                
                return;
            }
            lblSinRegistros.setVisible(false);
                actualizarPaginas(AnimeNegocio.obtenerListaFiltro(filtro).size());
        }else{
            lblSinRegistros.setVisible(false);
           actualizarPaginas(AnimeNegocio.obtenerListaFiltro(filtro).size()); 
            int limite = Integer.parseInt((String) CantidadPaginaCombo.getSelectedItem());
            int pagina = Integer.parseInt((String) PaginasCbx.getSelectedItem());
            int offset = (limite * (pagina - 1));
            ListaActual = AnimeNegocio.obtenerListaFiltro(filtro, limite, offset);
            llenarTabla(ListaActual);
        }
    }
    private void txtFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyReleased
        String texto = txtFiltro.getText();
        filtro();
    }//GEN-LAST:event_txtFiltroKeyReleased
    public void actualizarPaginas(int registrosTotales) {
        int limite = Integer.parseInt((String) CantidadPaginaCombo.getSelectedItem());
        int paginas = (int) Math.ceil((float) registrosTotales / limite);
        PaginasCbx.removeAllItems();
        for (int i = 1; i <= paginas; i++) {
            PaginasCbx.addItem((String.valueOf(i)));
        }
    }
    ;
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CantidadPaginaCombo;
    private javax.swing.JComboBox<String> PaginasCbx;
    private javax.swing.JButton btnCrearTablas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSinRegistros;
    private javax.swing.JTable tblAnime;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}
